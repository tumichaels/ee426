import globals;
import std::cells;
import "channel.act";
import std::gates;
import "./common.act";


//
// your definitions go here
// Reset will be available as a global signal at this point, as will
// Vdd and GND
// 
// Process names from a namespace use C++ naming conventions
// (e.g. std::channel::bd). You can also open a namespace.
// The ACT command open std::cells will add std::cells to the
// search path for process names.
//
open std::cells;
open std::gates;


template <pint N>
defproc buffer(bd?<N> L; bd!<N> R){

    bool ack;
    /* Control
      Sends out an acknoeldgement and a request since we have received the value and the next cell doesn't need it.
      If we are getting a request and right is ready to receive value, send current data.
      If left cell has received our ack, and the right has acknowledged our data, we can reset c element, and tell right we are done, and left that we are ready for more.
    */ 
    ctree_init<2,false,false> celt;
    celt.in[0] = L.r;
    INVX1 inv(R.a,celt.in[1]);

    ack = celt.out;
    ack = L.a;

    DELAY_LATCH d(ack,R.r);

    
    // Data
    PULSE_LATCH p(ack);
    N_LATCH<N> buf;
    buf.D = L.d;
    buf.Q = R.d;
    buf.CLK = p.r;
}

template <pint N, init_num>
defproc init_buffer(bd?<N> L; bd!<N> R){

    bool ack, init_reset;
    /* Control
      Sends out an acknoeldgement and a request since we have received the value and the next cell doesn't need it.
      If we are getting a request and right is ready to receive value, send current data.
      If left cell has received our ack, and the right has acknowledged our data, we can reset c element, and tell right we are done, and left that we are ready for more.
    */ 
    //


    ctree_init<2,false,true> celt;
    INVX1 inv(R.a,celt.in[1]);

    ack = celt.out;

    DELAY_LATCH d(ack,R.r);

    // LOCKING Mechanisms
    ctree_init<2,false,true> lock_ack;
    lock_ack.in[0] = Reset;
    lock_ack.in[1] = ack;
    init_reset = lock_ack.out;

    INVX1 final_ack(ack);
    NOR2X1 init_ack(init_reset,final_ack.Y,L.a);

    INVX1 final_req(L.r);
    NOR2X1 init_req(init_reset,final_req.Y,celt.in[0]);



    // Data
    PULSE_LATCH p(ack);
    N_LATCH_INIT<N,init_num> buf;
    buf.D = L.d;
    buf.Q = R.d;
    buf.CLK = p.r;
}

template <pint N>
defproc copy(bd?<N> L; bd!<N> R1,R2){

    bool ack, r_out;
    /* Control
      Sends out an acknoeldgement and a request since we have received the value and the next cell doesn't need it.
      If we are getting a request and right is ready to receive value, send current data.
      If left cell has received our ack, and the right has acknowledged our data, we can reset c element, and tell right we are done, and left that we are ready for more.
    */ 
    ctree_init<3,false,false> celt;
    celt.in[0] = L.r;
    INVX1 inv1(R1.a,celt.in[1]);
    INVX1 inv2(R2.a,celt.in[2]);

    celt.out = ack; 

    ack = L.a;
    DELAY_LATCH d(ack,r_out);
    r_out = R1.r;
    r_out = R2.r;
    
    // Data
    PULSE_LATCH p(ack);
    N_LATCH<N> buf;
    buf.D = L.d;
    buf.Q = R1.d;
    buf.Q = R2.d;
    buf.CLK = p.r;
}

template <pint N>
defproc split(bd?<N> L; bd?<1> C; bd!<N> A,B){
    bool ack, r_out, selector;
    /* Control
        Waits for both L and C to request, and the
    */ 

    
    ctree_init<3,false,false> celt;
    celt.in[0] = L.r;
    celt.in[1] = C.r;

    OR2X1 AB_ack(A.a,B.a);
    INVX1 inv1(AB_ack.Y,celt.in[2]);

    celt.out = ack; 

    ack = L.a;
    ack = C.a;

    DELAY<40> d(ack,r_out);
    
    // Split Request Signal
    INVX1 inv_selector(selector);
    AND2X1 A_AND_req(r_out,inv_selector.Y,A.r);
    AND2X1 B_AND_req(r_out,selector,B.r);

    // Data
    PULSE_LATCH p(ack);
    LATCHLO C_store(Reset,p.r,C.d[0],selector);

    N_LATCH<N> buf;
    buf.D = L.d;
    buf.Q = A.d;
    buf.Q = B.d;
    buf.CLK = p.r;
}

template <pint N>
defproc merge(bd?<N> A,B; bd?<1> C; bd!<N> Z){
    bool control_ack, data_ack, c_done, _ab_r, ab_r, _Za,selector;
    

    // Control signal processing
    ctree_init<2,false,false> control_celt;
    control_celt.in[0] = C.r;
    INVX1 inv1(Z.a,_Za);
    control_celt.in[1] = _Za;

    control_celt.out = control_ack;
    control_ack = C.a;

    DELAY<30> c_done_delay(control_ack,c_done);

    // Merging Processing
    /* Control
        Waits for both L and C to request, and the
    */ 
    // Setup Merge control logic. We should get a request from data_celt, and our control latch should be saved and computed ab_r properly.
    // Z should also be ready to receive data.
    MUX2X1 ab_r_sel(A.r,B.r,selector,_ab_r);
    INVX1 ab_r_inv(_ab_r, ab_r);
    ctree_init<3,false,false> data_celt;
    data_celt.in[0] = ab_r;
    data_celt.in[1] = c_done;
    data_celt.in[2] = _Za;

    // Z request
    data_celt.out = data_ack;
    DELAY_LATCH d(data_ack,Z.r);

    // Split Ack Signal
    INVX1 inv_selector(selector);
    AND2X1 A_AND_req(data_ack,selector,A.a);
    AND2X1 B_AND_req(data_ack,inv_selector.Y,B.a);
    

    

    // Data 
    // - Stores Mux selector value for both data and control 
    PULSE_LATCH p_control(control_ack);
    LATCHLO C_store(Reset,p_control.r,C.d[0],selector);

    PULSE_LATCH p_data(data_ack);
    N_MUX2<N> mux(A.d,B.d,selector);
    N_LATCH<N> buf;
    buf.D = mux.Y;
    buf.Q = Z.d;
    buf.CLK = p_data.r;
    // TODO: Clock pulse for this latch
}

template <pint N>
defproc add(bd?<N> A,B; bd!<N> Z){
    bool ack;
    

    // Merging Processing
    /* Control
        Waits for both L and C to request, and the
    */ 
    // Setup Merge control logic. We should get a request from data_celt, and our control latch should be saved and computed ab_r properly.

    ctree_init<3,false,false> celt;
    celt.in[0] = A.r;
    celt.in[1] = B.r;
    INVX1 inv1(Z.a,celt.in[2]);

    
    celt.out = ack;
    DELAY<50> d(ack,Z.r);

    //ACK
    ack = A.a;
    ack = B.a;
  
    

    // Data 
    // - Stores Mux selector value for both data and control 
    

    PULSE_LATCH p_data(ack);
    N_LATCH<N> ABuf(p_data.r, A.d);
    N_LATCH<N> BBuf(p_data.r, B.d);

    N_FAX<N> adder(ABuf.Q, BBuf.Q, Z.d);
}

template <pint N, source_num>
defproc df_source(bd<N> R){
    
    INVX1 inv(R.a,R.r);
    TIELOX1 lo;
    TIEHIX1 hi;

    (i : N : [((source_num >> i) % 2) = 0 -> R.d[i] = lo.Y;
            [] else -> R.d[i] = hi.Y;
        ]
    )
}

template <pint N>
defproc df_sink(bd<N> L){
    DELAY<2> d(L.r,L.a);
}



// Miscellaneous- Shifts and Rotations don't require handshakes.
//In place shifts and rotations
template <pint N,rot>
defproc rot(bd<N> L; bd<N> R){
    L.r = R.r;
    L.a = R.a;
    //Right
    // (i : N-rot : L.d[i] = R.d[i+rot];)
    // (i : rot : L.d[N-i-1] = R.d[rot-i-1];)

    //Left
    (i : N-rot : L.d[N-i-1] = R.d[N-i-1-rot];)
    (i : rot : L.d[i] = R.d[N-rot+i];)
}

template <pint N,shift>
defproc shift(bd<N> L; bd<N> R){
    TIELOX1 zero;
    L.r = R.r;
    L.a = R.a;
    //Right
    // (i : N-shift : L.d[i] = R.d[i+shift];)
    // (i : shift : R.d[i] = zero.Y;)

    //Left
    (i : N-shift : L.d[N-i-1] = R.d[N-i-1-shift];)
    (i : shift : R.d[N-shift+i] = zero.Y;)
}


// and, xor, inv

template <pint N>
defproc and(bd?<N> A,B; bd!<N> Z){
    bool ack;
    // Merging Processing
    /* Control
    */ 

    ctree_init<3,false,false> celt;
    celt.in[0] = A.r;
    celt.in[1] = B.r;
    INVX1 inv1(Z.a,celt.in[2]);
    
    celt.out = ack;
    DELAY<50> d(ack,Z.r);

    //ACK
    ack = A.a;
    ack = B.a;

    // Data 
    // - Stores Mux selector value for both data and control 
    PULSE_LATCH p_data(ack);
    N_LATCH<N> ABuf(p_data.r, A.d);
    N_LATCH<N> BBuf(p_data.r, B.d);

    N_AND<N> and(ABuf.Q, BBuf.Q, Z.d);
}

template <pint N>
defproc xor(bd?<N> A,B; bd!<N> Z){
    bool ack;
    // Merging Processing
    /* Control
    */ 
    // Setup Merge control logic. We should get a request from data_celt, and our control latch should be saved and computed ab_r properly.

    ctree_init<3,false,false> celt;
    celt.in[0] = A.r;
    celt.in[1] = B.r;
    INVX1 inv1(Z.a,celt.in[2]);
    
    celt.out = ack;
    DELAY<50> d(ack,Z.r);

    //ACK
    ack = A.a;
    ack = B.a;

    // Data 
    // - Stores Mux selector value for both data and control 
    PULSE_LATCH p_data(ack);
    N_LATCH<N> ABuf(p_data.r, A.d);
    N_LATCH<N> BBuf(p_data.r, B.d);

    N_XOR<N> xor(ABuf.Q, BBuf.Q, Z.d);
}

template <pint N>
defproc inv(bd?<N> A; bd!<N> Z){
    bool ack;
    // Merging Processing
    /* Control
    */ 

    ctree_init<2,false,false> celt;
    celt.in[0] = A.r;
    INVX1 inv1(Z.a,celt.in[1]);
    
    celt.out = ack;
    DELAY<50> d(ack,Z.r);

    //ACK
    ack = A.a;

    // Data 
    // - Stores Mux selector value for both data and control 
    PULSE_LATCH p_data(ack);
    N_LATCH<N> ABuf(p_data.r, A.d);

    N_INV<N> inv(ABuf.Q, Z.d);
}