import "cells.act";
import "channel.act";
import globals;

defproc chp_source (bd!<8> X)
{
  int<8> i;
  chp {
    [~Reset];
    i := 0;
  *[ i < 10 -> X!i; log("Sent Value: ",i); i := i + 1 ]
  }
}
defproc chp_source_offset (bd!<8> X)
{
  int<8> i;
  chp {
    [~Reset];
    i := 5;
    log("Starting to send values: Init value should have gone to sink.");
  *[ i < 10 -> X!i; log("Sent Value: ",i); i := i + 1 ]
  }
}

defproc chp_sink (bd?<8> X)
{
  int<8> v;
  chp {
    [~Reset];
    *[ X?v; log ("Received value: ", v) ]
  }
}

defproc chp_ten_sink(bd?<8> X){
    int<8> v;
    int<8> i;
  chp {
    [~Reset];
    *[ i < 10 -> X?v; i := i + 1; log("Received value: ", v) ]
  }
}


defproc buf_test()
{
   chp_source src;
   chp_sink snk;
   buffer<8> b(src.X, snk.X);
}

// template<pint N>
// defproc slack(bd?<8> L; bd!<8> R){
//   buffer<8> b[N];
//   (i : N-1 : b[i].R = b[i+1].L;)
//   b[0].L = L;
//   b[N-1].R = R;
// }

defproc multi_buf_test()
{
  init_buffer<8,10> b[64];
  (i : 63 : b[i].R = b[i+1].L;)
  
  chp_sink snk;
  buffer<8> b_out;
  slack<128> b_slack;
  b_out.R = snk.X;
  copy<8> output;
  output.L = b[63].R;
  output.R1 = b_out.L;
  output.R2 = b_slack.L;

  b_slack.R = b[0].L;
  
}




defproc init_buf_test()
{
   chp_source_offset src;
   chp_sink snk;
   init_buffer<8,562> b(src.X, snk.X);
}

defproc source_test()
{
   df_source<8,20> src;
   chp_ten_sink snk(src.R);
}

defproc sink_test()
{
  chp_source src;
  df_sink<8> snk(src.X);
}

defproc copy_test(){
  chp_source src;
  chp_sink sinkA,sinkB;

  copy<8> cp(src.X, sinkA.X, sinkB.X);
}


defproc chp_split_source(bd!<8> output; bd!<1> control){
  chp{
    [~Reset]; log("Sending 10 to B"); control!1,output!10;  log("Sending 11 to A"); control!0,output!11;  log("Sending 12 to A");  control!0,output!12;  log("Sent 13 to B");control!1, output!13
  }
}

defproc chp_merge_source(bd!<8> A,B; bd!<1> control){
  chp{
    [~Reset]; log("Sending 10 from A, setting control to A"); control!1, A!10; log("Sending 20 from B, setting control to B"); control!0, B!20;log("Sending 25 from A, setting control to A"); control!1, A!25; 
    log("Sending 5 from A, setting control to B. Shouldn't pass"); control!0, A!25
  }
}

defproc chp_add_source(bd!<8> A,B){
  chp{
    [~Reset]; log("Sending 10 on A and 15 on B"); A!10, B!15; log("Sending 100 on A and 150 on B");  A!100, B!150; log("Sending 1 on A and 2 on B");  A!1, B!2; log("Sending 25 on A and 127 on B");  A!25, B!127
  }
}

defproc split_test(){
  chp_split_source src;
  chp_sink snkA;
  chp_sink snkB;
  split<8> s(src.output,src.control,snkA.X,snkB.X);
}

defproc merge_test(){
  chp_merge_source src;
  chp_sink snk;
  merge<8> m(src.A,src.B,src.control,snk.X);
}

defproc adder_test(){
  chp_add_source src;
  chp_sink snk;
  add<8> a(src.A,src.B,snk.X);
}